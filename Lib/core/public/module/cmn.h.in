#pragma once

#if (!defined LIBMODULE_CORE_H)
    #error "Libmodule cmn.h should not be explicitly included."
#endif

#include <stdio.h>
#include <stdint.h>
#include <stdarg.h>
#include <sys/types.h>

#define LIBMODULE_VERSION_MAJ @PROJECT_VERSION_MAJOR@
#define LIBMODULE_VERSION_MIN @PROJECT_VERSION_MINOR@
#define LIBMODULE_VERSION_PAT @PROJECT_VERSION_PATCH@

/*
 * Function parameters that actually are
 * output values, are marked by this macro.
 */
#define OUT

/*
 * ctors order:
 * 0) global m_pre_start(), useful to set your own memhook if desired
 * 1) internal libmodule_init()
 * 2) each m_mod_on_boot() (only mod_easy API)
 * 3) each m_mod_ctor() (only mod_easy API)
 *
 * dtors order:
 * 1) each m_mod_dtor() (only mod_easy API)
 * 0) internal libmodule_deinit()
 */
#define _m_ctor0_         __attribute__((constructor (110)))
#define _m_ctor1_         __attribute__((constructor (111)))
#define _m_ctor2_         __attribute__((constructor (113)))
#define _m_ctor3_         __attribute__((constructor (114)))
#define _m_dtor0_         __attribute__((destructor (110)))
#define _m_dtor1_         __attribute__((destructor (111)))

/** Structs types **/

/* Incomplete structure declaration to mod and ctx handlers */
typedef struct _mod m_mod_t;
typedef struct _ctx m_ctx_t;

/*
 * Common to any context; set this in m_pre_start(),
 * ie: before library is inited and internal structures allocated
 */
int m_set_memhook(  void *(*_malloc)(size_t),
                    void *(*_calloc)(size_t, size_t),
                    void (*_free)(void *));
