#pragma once

#ifndef LIBMODULE_CORE_H
    #define LIBMODULE_CORE_H
#endif
#include <module/cmn.h>

/* Context flags */
typedef enum {
    M_CTX_NAME_DUP          = 1 << 0,         // Should ctx's name be strdupped? (only if a ctx is created during a register)
    M_CTX_NAME_AUTOFREE     = 1 << 1,         // Should ctx's name be autofreed? (only if a ctx is created during a register)
    M_CTX_PERSIST           = 1 << 2,         // Prevent ctx automatic destroying when there are no modules in it anymore. With this option, context is kept alive until m_ctx_deregister() is called.
    M_CTX_USERDATA_AUTOFREE = 1 << 3          // Automatically free ctx userdata upon deregister
} m_ctx_flags;

typedef struct {
    double activity_freq;
    uint64_t total_idle_time;
    uint64_t total_looping_time;
    uint64_t recv_msgs;
    size_t num_modules;
    size_t running_modules;
} m_ctx_stats_t;

/* Logger callback */
typedef void (*m_log_cb)(const m_mod_t *ref, const char *fmt, va_list args);

/* Returns default ctx if registered */
m_ctx_t *m_ctx_ref(const char *ctx_name);

/* Context interface functions */
int m_ctx_register(const char *ctx_name, OUT m_ctx_t **c, m_ctx_flags flags, const void *userdata);
int m_ctx_deregister(OUT m_ctx_t **c);

int m_ctx_set_logger(m_ctx_t *c, m_log_cb logger);
int m_ctx_loop(m_ctx_t *c);
int m_ctx_quit(m_ctx_t *c, uint8_t quit_code);

int m_ctx_fd(const m_ctx_t *c);

int m_ctx_dispatch(m_ctx_t *c);

int m_ctx_dump(const m_ctx_t *c);
int m_ctx_stats(const m_ctx_t *c, OUT m_ctx_stats_t *stats);

const char *m_ctx_name(const m_ctx_t *c);
const void *m_ctx_userdata(const m_ctx_t *c);

ssize_t m_ctx_len(const m_ctx_t *c);

int m_ctx_finalize(m_ctx_t *c);

/* FuseFS api */
@M_CTX_HAS_FS@

#ifdef M_CTX_HAS_FS

#include <module/mod.h>
#include <sys/ioctl.h>      // ioctl support
#define FUSE_USE_VERSION 35
#include <fuse.h>

#define LIBMODULE_MAGIC         'm' // libmodule API global prefix

enum {
    M_MOD_FS_STATE               = _IOR(LIBMODULE_MAGIC, 0, m_mod_states),
    M_MOD_FS_STATS               = _IOR(LIBMODULE_MAGIC, 1, m_mod_stats_t),
};

int m_ctx_fs_set_root(m_ctx_t *c, const char *path);
int m_ctx_fs_set_ops(m_ctx_t *c, const struct fuse_operations *ops);

#endif
